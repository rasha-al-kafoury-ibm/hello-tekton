apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-commit-inventory-repo-task
spec:
  params:
    - name: repository
      description: The Git Repository for the Application Source Code. If empty, the Repository url will be found from toolchain
      default: repository
    - name: appname
      description: The name of the application passed as environment variable
    - name: commitid
      description: The commit id of the Application Source Code Repository that triggered the build.
    - name: image-url
      description: The name of the binary artifact generated by the build
    - name: image-digest
      description: The checksum of the binary artifact generated by the build
    - name: shuttle-properties-file
  workspaces:
    - name: artifacts
      description: A workspace to store the output of intermittent steps
      mountPath: /artifacts
    - name: output
      description: A workspace to store the output of intermittent steps
      mountPath: /output
  steps:
    - name: commit-build-metadata
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      workingDir: /artifacts
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: APPNAME
          value: $(params.appname)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: GIT_COMMIT
          value: $(params.commitid)
        - name: ARTIFACT
          value: $(params.image-url)
        - name: CHECKSUM
          value: $(params.image-digest)
        - name: INVENTORY_FILE
          value: "inventory.json"
        - name: DEPLOY_FILE
          value: "deploy.yaml"
        - name: ENV_FILE
          value: $(params.shuttle-properties-file)
      script: |
          #!/bin/bash
          set -e -o pipefail;
          source ${ENV_FILE}
          cd /artifacts/inventory-repo;
          ls -laht
          git config user.email "xxx@yyy.zzz" && git config user.name "xxx"
          git checkout master
          echo { \"repository_url\": \"${REPOSITORY}\",\"artifact\": \"${ARTIFACT}\",\"build_number\": ${BUILD_NUMBER},\"commit_sha\": \"${GIT_COMMIT}\",\"name\": \"${APPNAME}\",\"pipeline_run_id\": \"${PIPELINE_RUN_ID}\",\"version\": \"v1\",\"signature\": \"${CHECKSUM}\" ,\"REGISTRY_URL\": \"${REGISTRY_URL}\" ,\"REGISTRY_NAMESPACE\": \"${REGISTRY_NAMESPACE}\" ,\"IMAGE_NAME\": \"${IMAGE_NAME}\" ,\"IMAGE_TAGS\": \"${IMAGE_TAGS}\"  ,\"IMAGE_MANIFEST_SHA\": \"${IMAGE_MANIFEST_SHA}\" } > inventory-info.json
          jq . inventory-info.json > $INVENTORY_FILE
          git add ./$INVENTORY_FILE
          git commit -m "Update Evidence"
          if [ -z "${DEPLOYMENT_FILE}" ]; then DEPLOYMENT_FILE=deploy.yaml ; fi
          if [ -f ${APPNAME}/${DEPLOYMENT_FILE} ]; then
              sed -i "s~^\([[:blank:]]*\)image:.*$~\1image: ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAGS}~" ${APPNAME}/${DEPLOYMENT_FILE}
              cat ${APPNAME}/${DEPLOYMENT_FILE}
          fi
          git commit -m "Update Configuration" ${APPNAME}/${DEPLOYMENT_FILE}
          git tag ${PIPELINE_RUN_ID}
          git push  origin master
          git push --tags
